package de.suitepad.linbridge.helper

import com.sendgrid.SendGrid
import de.suitepad.linbridge.BuildConfig
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import kotlin.coroutines.resume
import kotlin.coroutines.resumeWithException
import kotlin.coroutines.suspendCoroutine

class LogsExportHelper(private val sendGrid: SendGrid) {

    companion object {
        private const val senderEmail: String = "linbridge.logger@suitepad.de"
        private val receiverEmail: String = ""
        private const val defaultMailBody: String =
            "This mail has been generated by the LinBridge Android App, \nPlease find attached the Infrared recordings."
    }

    lateinit var logs: String

    var hotelName: String? = null
    var description: String? = null

    private fun createMail(): SendGrid.Email = SendGrid.Email().apply {
        from = senderEmail
        addTo(receiverEmail)
        subject = "Linbridge logs${if (hotelName.isNullOrBlank()) "" else " $hotelName"}"
        text = """
            ${if (hotelName.isNullOrBlank()) "" else "Logs from $hotelName"}
            ${if (description.isNullOrBlank()) "No description provided" else "$description"}
            $defaultMailBody
        """.trimIndent()
        addAttachment("linbridge_logs${if (hotelName.isNullOrBlank()) "" else "_$hotelName"}.html", makeLogsBrowserFriendly(logs).byteInputStream())
    }

    private fun makeLogsBrowserFriendly(logs: String): String {
        return """<html>
            <head></head>
            <body text="white" bgcolor="black">
              $logs
            </body>
            </html>
        """.trimIndent()
    }

    /**
     * a suspending function that would send an email to engineering@suitepad.de containing all the recorded IR codes
     * @return the Http POST result code
     */
    suspend fun sendIt(): Int = withContext(Dispatchers.IO) {
        suspendCoroutine<Int> {
            try {
                val response = sendGrid.send(createMail())
                it.resume(response.code)
            } catch (e: Exception) {
                it.resumeWithException(e)
            }
        }
    }
}